class ST77XX {
    constructor() {
        this.spi = SPI1
        this.dc = 12
        this.cs = 15
        this.res = undefined
        this._ox = 0  // offset x
        this._oy = 0  // offset y
        this.width = 0
        this.height = 0
    }

    async hardReset() {
        if(this.res!=undefined) {
            digitalWrite(this.res, 0)
            await delay(100)
            digitalWrite(this.res, 1)
            await delay(100)
        }
    }

    async wakeup() {
        this.sendCommand(0x11);     //Sleep out
        await delay(120);           //Delay 120ms
    }

    rgb565(r,g,b) {
        return ((r & 31) << 11) | ((g & 63)<<5) | (b & 31)
    }

    sendFillCommand(x1,y1, x2,y2) {
        x1+= this._ox
        x2+= this._ox
        y1+= this._oy
        y2+= this._oy

        // x1, x2
        this.sendCommand(0x2A)
        this.sendData([
            (x1>>8)&255, x1&255 ,
            (x2>>8)&255, x2&255 ,
        ])
        // y1, y2
        this.sendCommand(0x2B)
        this.sendData([
            (y1>>8)&255, y1&255 ,
            (y2>>8)&255, y2&255 ,
        ])

        this.sendCommand(0x2C)
        
        digitalWrite(this.dc, 1)
    }

    fillRect (x1,y1, x2,y2, red, green, blue) {

        this.sendFillCommand(x1,y1, x2,y2)
        
        let raw = be_raw.malloc(20480)
        if(!raw) {
            console.log("momery low, can not malloc buffer to send data")
            return
        }

        let rgb565 = this.rgb565(red, green, blue)

        // 填充数组
        let n = (x2-x1+1) * (y2-y1+1)
        be_raw.fill16(raw, rgb565, n>=10240? 10240: n)

        // 分批发送
        for( ; n>0; n-=10240) {
            this.spi.sendRaw(raw, n>=10240? 20480: (n*2), this.cs)
        }
        
        be_raw.free(raw)
    }
    
    sendCommand(cmd) {
        digitalWrite(this.dc, 0)
        this.spi.send(cmd, this.cs)
    }

    sendData(data) {
        digitalWrite(this.dc, 1)
        this.spi.send(data, this.cs)
    }

    async sendCmdSeq(seq){
        for(let i=0;i<seq.length;i++) {
            this.sendCommand(seq[i++])
            // await delay(1)
            if(seq[i]) {
                this.sendData(seq[i])
                // await delay(1)
            }
        }
    }
}


class BeScreen096i extends ST77XX {

    constructor(spi, cs, dc, res){
        super(spi, dc, cs, res)
        this._ox = 26
        this._oy = 1
        this.width = 80
        this.height = 160
    }

    async begin(spi, cs, dc, res) {
        if(spi!=undefined)
            this.spi = spi
        if(cs!=undefined)
            this.cs = cs
        if(dc!=undefined)
            this.dc = dc
        if(spi!=undefined)
            this.res = res
        
        await this.hardReset()
        await this.wakeup()

        this.sendCmdSeq([
            // Normal mode
            0xB1, [0x05, 0x3C, 0x3C], 

            // Idle mode
            0xB2, [0x05, 0x3C, 0x3C],      
            
            // Partial mode
            0xB3, [0x05,0x3C,0x3C,0x05,0x3C,0x3C],      
            
            // Dot inversion
            0xB4, [0x03],      
            
            // AVDD GVDD
            0xC0, [0xAB,0x0B,0x04],   
            
            // VGH VGL
            0xC1, [0xC5],   
            
            // Normal Mode
            0xC2, [0x0D,0x00],   
            
            // Idle
            0xC3, [0x8D,0x6A],   
            
            // Partial+Full
            0xC4, [0x8D,0xEE],   
            
            // VCOM
            0xC5, [0x0F],   
            
            //positive gamma
            0xE0, [0x07,0x0E,0x08,0x07,0x10,0x07,0x02,0x07,0x09,0x0F,0x25,0x36,0x00,0x08,0x04,0x10],  
            
            //negative gamma
            0xE1, [0x0A,0x0D,0x08,0x07,0x0F,0x07,0x02,0x07,0x09,0x0F,0x25,0x35,0x00,0x09,0x04,0x10],   

            // 
            0xFC, [0x80],   
            // 
            0x3A, [0x05],   

            // 转动方向
            0x36, [0x08],   

            ///Display inversion
            0x21, null,   

            //Display on
            0x29, null,   

            // //Set Column Address 26 - 105
            // 0x2A, [0x00,this._ox,0x00,this._ox+this.width-1],   

            // //Set Page Address 1 - 160
            // 0x2B, [0x00, this._oy, 0x00, this._oy+this.height-1],   
        ])
    }
}


class BeScreen130i extends ST77XX {
    constructor(spi, cs, dc, res){
        super(spi, dc, cs, res)
        this._ox = 1
        this._oy = 1
        this.width = 240
        this.height = 240
    }

    async begin(spi, cs, dc, res) {
        if(spi!=undefined)
            this.spi = spi
        if(cs!=undefined)
            this.cs = cs
        if(dc!=undefined)
            this.dc = dc
        if(spi!=undefined)
            this.res = res

        await this.hardReset()
        await this.wakeup()

        this.sendCmdSeq([

            // 方向
            0x36, [0x00], 

            // 颜色模式： RGB565 (16Bit)
            0x3A, [0x05],      
            
            // 帧率: 60hz
            0xC6, [0x0F] ,
            
            // power control
            0xD0, [0xA4, 0xA1] ,
            
            // 反色
            0x21, null ,

            // 打开屏幕
            0x29, null ,
        ])

    }
}


module.exports = {
    ST77XX, BeScreen096i, BeScreen130i
}