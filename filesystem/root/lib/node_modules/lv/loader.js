const MapPropFuncs = {
    align: 'setAlign' ,
    flex: 'setFlexFlow' ,
    flexAlign: 'setFlexAlign' ,
    text: 'setText' ,
    grow: 'setFlexGrow' ,
    center: 'center' ,
    width: 'setWidth' ,
    height: 'setHeight' ,
    x: 'setX' ,
    y: 'setY' ,
}

exports.fromJson = function fromJson(json, parent, refs){

    if(!refs)
        refs={}

    if(json instanceof Array) {
        for(let childJson of json) {
            fromJson(childJson, parent, refs)
        }
    }
    else {

        let clzname = json["class"] || json.clazz
        if(!clzname) {
            throw new Error("missing class name")
        }
        if(!beapi.lvgl[clzname]){
            throw new Error("unknow class name: "+clzname)
        }
        let obj = new beapi.lvgl[clzname](parent)

        if(json.ref) {
            refs[json.ref] = obj
        }

        for(let propName in MapPropFuncs) {
            if(typeof json[propName]=="undefined")
                continue
            let methodName = MapPropFuncs[propName]
            if(typeof obj[methodName]=='function') {
                obj[methodName]( json[propName] )
            }
        }

        if(json.style) {
            for(let propName in json.style) {
                obj.setStyle(propName, json.style[propName])
            }
        }

        if(json.children) {
            for(let childJson of json.children) {
                fromJson(childJson, obj, refs)
            }
        }
    }
    
    return refs
}
exports.toJson = function fromJson(){
    throw new Error("not implemented")
}
