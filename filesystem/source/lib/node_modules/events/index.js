module.exports = class EventEmitter {
    _handles = {}
    /**
     * 
     * @param {string|string[]} event 
     * @param {function} handle 
     */
    on(event, handle) {
        if(typeof(event)=="string") {
            if(!this._handles[event]){
                this._handles[event] = []
            }
            this._handles[event].push(handle)
        }
        else {
            for(var eventName of event) {
                if(!this._handles[eventName]){
                    this._handles[eventName] = []
                }
                this._handles[eventName].push(handle)
            }
        }
        return this
    }

    /**
     * 
     * @param {string} eventName 
     * @param {function} handle 
     */
    once(eventName, handle) {
        var wrapper =  (...args) => {
            this.off(eventName, wrapper)
            handle.apply(this, args)
        }
        wrapper.__origin_handle = handle
        this.on(eventName, wrapper)
        return this
    }

    off(eventName, handle, all) {
        if(!this._handles[eventName]) {
            return
        }
        for(let h=this._handles[eventName].length-1; h>=0; h--) {
            let func = this._handles[eventName][h].__origin_handle || this._handles[eventName][h]
            if(!handle || handle==func) {
                this._handles[eventName][h].__origin_handle = null
                this._handles[eventName].splice(h,1)
                if(handle && !all) {
                    return
                }
            }
        }
        if(!this._handles[eventName].length) {
            delete this._handles[eventName]
        }
        return this
    }

    emit(eventName, ...args) {
        if(this._handles[eventName]) {
            for(let handle of this._handles[eventName]) {
                handle.apply(this, args)
            }
        }
        if(this._handles["*"]) {
            for(let handle of this._handles["*"]) {
                handle.apply(this, [eventName, ...args])
            }
        }
        return this
    }

    destroy() {
        for(let eventName in this._handles) {
            this._handles[eventName].forEach(cb=>{
                if(cb.__origin_handle) {
                    delete cb.__origin_handle
                }
            })
            this._handles[eventName].splice(0)
            delete this._handles[eventName]
        }
    }
}