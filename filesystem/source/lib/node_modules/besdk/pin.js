const EventEmitter = require("events")

let __pool = {}
let __flyweight = {}

class Pin extends EventEmitter {
    constructor(gpio) {
        super()
        this.gpio = gpio
        this.mode = ""
        if(!__pool[gpio])
            __pool[gpio] = []
        __pool[gpio].push(this)
    }

    watch(callback, mode, bounce_ms, once) {
        if(bounce_ms>0) {
            let oricb = callback
            let timer = -1
            callback = (gpio, val)=>{
                // console.log(gpio,val, bounce_ms, timer)
                if(timer>-1) 
                    return
                timer = setTimeout(()=>{
                    timer = -1
                    // console.log("timeout", digitalRead(gpio), val)
                    if(digitalRead(gpio) == val) {
                        oricb(gpio, val)
                    }
                }, bounce_ms)
            }
        }
        if(!!once)
            this.once(mode, callback)
        else 
            this.on(mode,callback)
        this._setISR()
        return this
    }
    unwatch(callback, mode) {
        if(!mode) {
            this.off("rising", callback, true)
            this.off("falling", callback, true)
            this.off("both", callback, true)
        }
        else {
            this.off(mode, callback, true)
        }
        this._setISR()
        return this
    }
    clear() {
        this.off("rising")
        this.off("falling")
        this.off("both")
        this._setISR()
        return this
    }

    _setISR() {
        let mode = 0 ;
        if(this._handles["both"]&&this._handles["both"].length) {
            mode = 3 // both
        }
        if(this._handles["rising"]&&this._handles["rising"].length) {
            mode|= 1 // rising
        }
        if(this._handles["falling"]&&this._handles["falling"].length) {
            mode|= 2 // falling
        }
        setPinISR(this.gpio, mode)
    }

    setMode(mode) {
        pinMode(this.gpio, mode)
        this.mode = mode
        return this
    }

    write(val) {
        return digitalWrite(this.gpio, val)
    }

    read() {
        return digitalRead(this.gpio)
    }

}

setPinISRCallback(function(gpio){
    let val = digitalRead(gpio)
    if(__pool[gpio]) {
        for(let pin of __pool[gpio]) {
            pin.emit(val? "rising": "falling", gpio, val)
            pin.emit("both", gpio, val)
        }
    }
})

global.pin = function(gpio) {
    if(!__flyweight[gpio])
        __flyweight[gpio] = new Pin(gpio)
    return __flyweight[gpio]
}

module.exports = Pin