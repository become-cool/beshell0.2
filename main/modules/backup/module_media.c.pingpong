
// #include <freertos/task.h>
// #include <freertos/queue.h>

#include "module_media.h"
#include "module_serial.h"
#include "module_fs.h"
#include "widgets_gen.h"
#include "cutils.h"
#include "utils.h"
#include "driver/i2s.h"
#include "pwm_audio.h"
#include "dac_audio.h"


#include "mp3dec.h"


#include "esp_log.h"
#include <stdio.h>
#include <string.h>
#include "psram.h"
#include <sys/stat.h>


#define echo_time(msg, codes)                   \
    {                                           \
        int64_t t = gettime() ;                 \
        codes                                   \
        printf(msg": %lldms\n", gettime()-t) ;  \
    }
#define necho_time(msg, codes)  codes


#define BUFF_SRC_SIZE   MAINBUF_SIZE
#define BUFF_FRAME_SIZE       1153*4

enum {
    CMD_START = 0 ,
    CMD_RESET ,
    CMD_PAUSE ,
    CMD_RESUME ,
    CMD_I2S_WRITE ,
    CMD_I2S_WRITE_DONE ,
    CMD_STREAM_DONE ,
} ;

typedef struct {
    void * buff ;
    MP3FrameInfo info ;
} frame_t ;

typedef struct {

    uint8_t i2s:4 ;

    bool playing:1 ;
    bool paused:1 ;

    FILE * file ;
    char src_path[256] ;

    HMP3Decoder decoder ;
    int samplerate ;

    QueueHandle_t queue_decoder;
    QueueHandle_t queue_pcm_player;

    TaskHandle_t task_decoder ;
    TaskHandle_t task_player ;

    uint8_t * buff_src ;
    uint8_t * read_ptr ;
    int decode_left ;
    
    frame_t frame_ping ;
    frame_t frame_pong ;
    frame_t * frame_writing ;
    frame_t * frame_reading ;

    JSContext * ctx ;
    JSValue jsobj ;
    
} audio_pipe_t ;



void player_set_playing(audio_pipe_t * player, bool playing) {
    if(player->playing == playing) {
        return ;
    }
    player->playing = playing ;
    if(playing) {
        JS_DupValue(player->ctx, player->jsobj) ;
    }
    else {
        JS_FreeValue(player->ctx, player->jsobj) ;
    }
}

#define POST_QUEUE(queue, cmd)                      \
    while(xQueueSend(queue, &cmd, 0) != pdTRUE) {   \
        vTaskDelay(1) ;                             \
    }

#define FRAME player->frame_reading
// 放音线程
static void task_pcm_player(audio_pipe_t * player) {

    printf("task_pcm_player()\n") ;

    int cmd ;
    int idle_ticks = 10/ portTICK_PERIOD_MS ;
    size_t cnt ;

    while(1) {
        
        vTaskDelay(0) ;

        cmd = -1 ;
	    xQueueReceive(player->queue_pcm_player, &cmd, 0);
        if(cmd==-1) {
            vTaskDelay(idle_ticks) ;
            continue ;
        }
        // printf("task_pcm_player() receive:%d\n",cmd) ;

        if(cmd==CMD_I2S_WRITE) {
            

            if(player->samplerate != FRAME->info.samprate) {

                i2s_set_clk( player->i2s, FRAME->info.samprate, 32, FRAME->info.nChans );

                printf("frame info: bitrate=%d,layer=%d,bitsPerSample=%d,nChans=%d,samprate=%d,outputSamps=%d\n"
                    , FRAME->info.bitrate
                    , FRAME->info.layer
                    , FRAME->info.bitsPerSample
                    , FRAME->info.nChans
                    , FRAME->info.samprate
                    , FRAME->info.outputSamps
                );
                    
                player->samplerate = FRAME->info.samprate;
            }


            // ES8156 如果省略 MCLK ，由 SCLK 提供主时钟，
            // 则 SCLK/LRSLK >=64 , 因此 sample 最小 32bit，而 esp-idf 最大支持 32bit
            // 因此统一 32bit/sample
            if(FRAME->info.bitsPerSample!=32) {
                necho_time("i2s", {
                // 扩展到 32 sample
                i2s_write_expand( player->i2s, FRAME->buff
                    , FRAME->info.outputSamps*FRAME->info.nChans
                    , 16, 32, &cnt, portMAX_DELAY );
                })
            }
            else {
                i2s_write(player->i2s, FRAME->buff
                    , FRAME->info.outputSamps*FRAME->info.nChans
                    , &cnt, portMAX_DELAY);
            }
            

            cmd = CMD_I2S_WRITE_DONE ;
	        POST_QUEUE(player->queue_decoder, cmd);


            vTaskDelay(0) ;
        }

        else if(cmd==CMD_STREAM_DONE) {
            // echo CMD_STREAM_DONE
            POST_QUEUE(player->queue_decoder, cmd);
        }
    }
}


static inline bool mp3_decode_start(audio_pipe_t * player) {

    printf("mp3_decode_start()\n") ;

    if(!player->file) {    
        ds(player->src_path)
        player->file = fopen(player->src_path,"rb") ;
    }
    if(!player->file) {
        printf("can not open file %s\n",player->src_path) ; // @TODO: post js event
        return false ;
    }

    char tag[10];
    int tag_len = 0;
    int read_bytes = fread(tag, 1, 10, player->file);
    // dn5(read_bytes, tag[0], tag[1], tag[2], tag[3])

    // DN(read_bytes)
    if(read_bytes != 10) {
        printf("mp3 file length invalid (%d)\n",read_bytes) ; // @TODO: post js event
        return false ;
    }
    
    if (memcmp(tag,"ID3",3) == 0)  {
        tag_len = ((tag[6] & 0x7F)<< 21)|((tag[7] & 0x7F) << 14) | ((tag[8] & 0x7F) << 7) | (tag[9] & 0x7F);
            // printf("tag_len: %d %x %x %x %x", tag_len,tag[6],tag[7],tag[8],tag[9]);
        fseek(player->file, tag_len - 10, SEEK_SET);
    }
    else  {
        fseek(player->file, 0, SEEK_SET);
    }

    player->read_ptr = player->buff_src;
    player->decode_left = 0 ;

    return true ;
}


// 读文件并解码一帧
// 返回：错误代码 <0; 文件结束 0; 成功 1
static inline int mp3_decode_frame(audio_pipe_t * player) {

    if(player->file==NULL){
        printf("file not open\n");
        return -20 ;
    }
    
    size_t cnt = 0 ;
    int errs = 0 ;

    while (1) {

        vTaskDelay(0) ;

        if (player->decode_left < BUFF_SRC_SIZE) {
            necho_time("memmove", {
            memmove(player->buff_src, player->read_ptr, player->decode_left);
            })
            int br = fread(player->buff_src + player->decode_left, 1, BUFF_SRC_SIZE - player->decode_left, player->file);
            // printf("read(%d): %lld\n", ts, gettime() - ts);

            // 结束
            if ((br == 0)&&(player->decode_left==0)) {
                fclose(player->file) ;
                player->file = NULL ;
                return 0 ;
            }

            player->decode_left = player->decode_left + br;
            player->read_ptr = player->buff_src;
        }
        int offset = MP3FindSyncWord(player->read_ptr, player->decode_left);
        if (offset < 0) {  

            printf("MP3FindSyncWord not find\n");
            player->decode_left=0;
            vTaskDelay(0) ;
            continue;

        } else {

            player->read_ptr += offset;                         //data start point
            player->decode_left -= offset;                 //in buffer
            // dp(player->read_ptr)
            // dp(player->frame_writing->buff)
            
            necho_time("MP3Decode", {
            errs = MP3Decode(player->decoder, &player->read_ptr, &player->decode_left, player->frame_writing->buff, 0);
            })

            if (errs != 0) {
                printf("MP3Decode failed ,code is %d \n",errs);
                return errs ;
            }
            MP3GetLastFrameInfo(player->decoder, &player->frame_writing->info);
            return 1 ;
        }
    }
}

// 交换 ping/pong 缓冲区
static inline void player_swap_buffer(audio_pipe_t * player) {
    frame_t * frm_tmp ;

    // 交换 reading / writing 缓冲区 (ping/pong)
    frm_tmp = player->frame_reading ;
    player->frame_writing = player->frame_reading ;
    player->frame_reading = frm_tmp ;
}


#define DECODE_FRAME                    \
    if(!player->file) {                 \
        continue ;                      \
    }                                   \
    res = mp3_decode_frame(player) ;    \
    if(res<0) {                         \
        printf("error: %d\n", res) ;    \
        goto err ;                      \
    }                                   \
    else if(res==0) {                   \
        cmd = CMD_STREAM_DONE ;         \
        POST_QUEUE(player->queue_pcm_player, cmd) \
        continue ;                      \
    }

// 解码任务线程
static void task_mp3_decoder(audio_pipe_t * player) {

    printf("task_mp3_decoder()\n") ;

    int cmd ;
    int idle_ticks = 10/ portTICK_PERIOD_MS ;
    int res ;

    // int64_t t0 = gettime(), t1=0 ;

    while(1) {

        vTaskDelay(0) ;

        cmd = -1 ;
	    xQueueReceive(player->queue_decoder, &cmd, 0);
        if(cmd==-1) {
            // vTaskDelay(idle_ticks) ;
            continue ;
        }
        // printf("task_mp3_decoder() receive:%d\n",cmd) ;

        if(cmd==CMD_START) {
            dn(CMD_START)
            if(!mp3_decode_start(player)) {
                goto err ;
            }

            // @TODO: post js event
            
            // 先完成 ping/pong 两个缓冲区的填充
            DECODE_FRAME
            player_swap_buffer(player) ;
            DECODE_FRAME

            // 通知输出
            cmd = CMD_I2S_WRITE ;
            POST_QUEUE(player->queue_pcm_player, cmd);

            continue ;
        }
        
        if( !player->playing ) {
            // vTaskDelay(idle_ticks) ;
            continue ;
        }

        if(cmd==CMD_I2S_WRITE_DONE) {

            player_swap_buffer(player) ;

            // 通知输出
            cmd = CMD_I2S_WRITE ;
	        POST_QUEUE(player->queue_pcm_player, cmd);

            // 下一帧解码（并处理错误和结束）
            DECODE_FRAME

            // t1 = gettime() ;
            // printf("decode: %lld\n", t1-t0);
            // t0 = t1 ;

            continue ;
        }

        // 由 task_pcm_player 线程 echo CMD_STREAM_DONE 后结束
        else if(cmd==CMD_STREAM_DONE) {
            // @TODO: post js event
            player_set_playing(player, false) ;
            continue ;
        }

        continue ;
err:
        if(player->file) {
            fclose(player->file) ;
            player->file = NULL ;
        }
        player_set_playing(player, false) ;
        // @TODO: post js event
        continue ;
    }
}

#define THIS_PLAYER(thisobj)                                                \
    audio_pipe_t * thisobj = JS_GetOpaque(this_val, js_audio_player_class_id) ; \
    if(!thisobj) {                                                          \
        THROW_EXCEPTION("must be called as a Player method")           \
    }


static JSClassID js_audio_player_class_id ;
static JSValue js_audio_player_constructor(JSContext *ctx, JSValueConst new_target, int argc, JSValueConst *argv){
    JSValue jsobj = JS_NewObjectClass(ctx, js_audio_player_class_id) ;

    dn(sizeof(audio_pipe_t))
    audio_pipe_t * player = heap_caps_malloc(sizeof(audio_pipe_t), MALLOC_CAP_DMA) ;
    if(!player) {
        THROW_EXCEPTION("out of memory?")
    }
    memset(player, 0, sizeof(audio_pipe_t)) ;
    JS_SetOpaque(jsobj, player) ;

    // 初始化
    player->i2s = 0 ;  // @ TODO js 参数
    echo_DMA("before MP3InitDecoder") ;
    player->decoder = MP3InitDecoder();
    echo_DMA("after MP3InitDecoder") ;

    player->buff_src = heap_caps_malloc(BUFF_SRC_SIZE, MALLOC_CAP_DMA) ;
    if(!player->buff_src) {
        free(player) ;
        THROW_EXCEPTION("out of memory?")
    }
    player->frame_ping.buff = heap_caps_malloc(BUFF_FRAME_SIZE, MALLOC_CAP_DMA) ;
    if(!player->frame_ping.buff) {
        free(player->buff_src) ;
        free(player) ;
        THROW_EXCEPTION("out of memory?")
    }
    player->frame_pong.buff = heap_caps_malloc(BUFF_FRAME_SIZE, MALLOC_CAP_DMA) ;
    if(!player->frame_pong.buff) {
        free(player->buff_src) ;
        free(player->frame_ping.buff) ;
        free(player) ;
        THROW_EXCEPTION("out of memory?")
    }
    player->frame_reading = & player->frame_ping ;
    player->frame_writing = & player->frame_pong ;


    echo_DMA("before xQueueCreate") ;
    player->queue_decoder = xQueueCreate(1, sizeof(int));
    player->queue_pcm_player = xQueueCreate(1, sizeof(int));

    player->ctx = ctx ;
    player->jsobj = jsobj ;

    echo_DMA("before xTaskCreatePinnedToCore") ;
    xTaskCreatePinnedToCore(&task_mp3_decoder, "task_mp3_decoder", 1024*2, player, 5, &player->task_decoder, 0);
    xTaskCreatePinnedToCore(&task_pcm_player, "task_pcm_player", 1024*2, player, 10, &player->task_player, 1);

    echo_DMA("all done") ;
    return jsobj ;
}
static void js_audio_player_finalizer(JSRuntime *rt, JSValue this_val){
    printf("deinit all player resource") ;
    
    audio_pipe_t * player = JS_GetOpaque(this_val, js_audio_player_class_id) ;
    if(!player) {
        printf("?! js_audio_player_finalizer()") ;
        return ;
    }

    vTaskDelete(player->task_decoder) ;
    vTaskDelete(player->task_player) ;

    free(player->buff_src) ;
    free(player->frame_ping.buff) ;
    free(player->frame_pong.buff) ;

    if(player->file) {
        fclose(player->file) ;
        player->file = NULL ;
    }

    i2s_zero_dma_buffer(player->i2s);
    MP3FreeDecoder(player->decoder);

    free(player) ;
    JS_SetOpaque(this_val, NULL) ;
}
static JSClassDef js_audio_player_class = {
    "audio.Player",
    .finalizer = js_audio_player_finalizer,
} ;

static JSValue js_audio_play_pcm(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv) {
    CHECK_ARGC(1)
    char * path = js_arg_to_vfspath(ctx,argv[0]) ;
    ds(path)
    FILE *h=fopen(path,"rb");
    if(!h) {
        THROW_EXCEPTION("can not open file path")
    }

    char buff[2048] ;
    int read_bytes = 0 ;
    size_t cnt = 0 ;

    i2s_set_clk(0,44100,32,2);

    while( (read_bytes = fread(buff, 1, 2048, h)) ) {
        i2s_write_expand(0, buff, read_bytes, 16, 32, &cnt, portMAX_DELAY );
    }

    fclose(h) ;

    free(path) ;
    return JS_UNDEFINED ;
}


static JSValue js_audio_play_mp3(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv) {
    THIS_PLAYER(player)
    if(player->playing) {
        THROW_EXCEPTION("player is playing")
    }
    CHECK_ARGC(1)
    ARGV_TO_STRING(0, path) ;

    if(strlen(path) + strlen(vfs_path_prefix) + 1 > sizeof(player->src_path)) {
        free(path) ;
        THROW_EXCEPTION("path too long")
    }

    sprintf(player->src_path, "%s%s", vfs_path_prefix, path) ;
    JS_FreeCString(ctx, path) ;

    ds(player->src_path)

    player_set_playing(player, true) ;

    int cmd = CMD_START ;
    xQueueSend(player->queue_decoder, &cmd, 0) ;

    return JS_UNDEFINED ;
}


static JSValue js_audio_get_status(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv) {

    return JS_UNDEFINED ;
}
static JSValue js_audio_pause(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv) {
    return JS_UNDEFINED ;
}
static JSValue js_audio_resume(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv) {
    return JS_UNDEFINED ;
}
static JSValue js_audio_track_info(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv) {
    return JS_UNDEFINED ;
}
static JSValue js_audio_stop(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv) {
    return JS_UNDEFINED ;
}




static const JSCFunctionListEntry js_audio_player_proto_funcs[] = {
    JS_CFUNC_DEF("playMP3", 0, js_audio_play_mp3),
} ;

void be_module_media_init() {
    JS_NewClassID(&js_audio_player_class_id);
}

void be_module_media_require(JSContext *ctx) {

    JSValue beapi = js_get_glob_prop(ctx, 1, "beapi") ;
    JSValue audio = JS_NewObject(ctx);
    
    JS_SetPropertyStr(ctx, beapi, "audio", audio);

    JS_SetPropertyStr(ctx, audio, "playPCM", JS_NewCFunction(ctx, js_audio_play_pcm, "playPCM", 1));
    JS_SetPropertyStr(ctx, audio, "playMP3", JS_NewCFunction(ctx, js_audio_play_mp3, "playMP3", 1));
    // JS_SetPropertyStr(ctx, audio, "playMP3Sync", JS_NewCFunction(ctx, js_audio_play_mp3_sync, "playMP3Sync", 1));
    JS_SetPropertyStr(ctx, audio, "pause", JS_NewCFunction(ctx, js_audio_pause, "pause", 1));
    JS_SetPropertyStr(ctx, audio, "resume", JS_NewCFunction(ctx, js_audio_resume, "resume", 1));
    JS_SetPropertyStr(ctx, audio, "stop", JS_NewCFunction(ctx, js_audio_stop, "stop", 1));
    JS_SetPropertyStr(ctx, audio, "status", JS_NewCFunction(ctx, js_audio_get_status, "status", 1));
    JS_SetPropertyStr(ctx, audio, "trackInfo", JS_NewCFunction(ctx, js_audio_track_info, "trackInfo", 1));

    QJS_DEF_CLASS(audio_player, "Player", "audio.Player", JS_UNDEFINED, audio)

    JS_FreeValue(ctx, beapi);
}


void be_module_media_reset(JSContext *ctx) {
}