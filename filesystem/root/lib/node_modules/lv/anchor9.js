
/**
 * 
 *     lfttop        top          rgttop
 *        O-----------O-------------O
 *        |                         |
 *        |                         |
 *    lft O        center           O rgt
 *        |                         |
 *        |                         |
 *        O-----------O-------------O
 *     lftbtm        btm          rgtbtm
 * 
 */

const WayStart = 0
const WayCenter = 1
const WayEnd = 2

const AnchorWay = {
    lfttop: [ WayStart,  WayStart  ],
    top:    [ WayStart,  WayCenter ],
    rgttop: [ WayStart,  WayEnd    ],
    lft:    [ WayCenter, WayStart  ],
    center: [ WayCenter, WayCenter ],
    rgt:    [ WayCenter, WayEnd    ],
    lftbtm: [ WayEnd,    WayStart  ],
    btm:    [ WayEnd,    WayCenter ],
    rgtbtm: [ WayEnd,    WayEnd    ],
}

class Anchor {

    constructor(rect, way){
        this.rect = rect
        this.way = way
    }
    
    rect = null
    way = null
    links = []

    // 递归检查锚点是否已经被固定
    isFixed() {
        let parent = this.rect.getParent()
        if(!parent) {
            return true
        }
        for(let link of this.links) {
            let another = this.another(link)
            if(another.rect==parent)
                return true
            if(another.isFixed()) {
                return true
            }
        }
        return false
    }

    another(link) {
        if(link.from==this) {
            return link.to
        }
        else if(link.to==this) {
            return link.from
        }
        return null
    }

    linkTo(target, anchorName, offsetX, offsetY) {
        let parent = this.rect.getParent()
        if(parent!=target.getParent() && parent!=target){
            throw new Error("can only link to siblings or parent")
        }
        let another = target.anchor(anchorName)
        for(let link of this.links) {
            if(
                (link.from==this && link.to==another)
                || (link.to==this && link.from==another)
            ){
                return
            }
        }

        let link = { from: this, to: another, ox: offsetX, oy: offsetY }
        this.links.push(link)

        if(parent!=target) {
            another.links.push(link)
        }

        let [tx,ty] = another.calculateCoords()
        
        this.moveTo( tx+offsetX, ty+offsetY )
    }

    calculateCoords() {
        let x = this.rect.getX()
        if(way[0]) {
            x+= this.rect.getWidth() * way[0] / 2
        }
        let y = this.rect.getY()
        if(way[1]) {
            y+= this.rect.getHeight() * way[1] / 2
        }
        return [x, y]
    }

    moveTo(x, y) {
        let [_x, _y] = this.calculateCoords()
        if(x!=_x) {
            
        }
    }
}





beapi.lvgl.Obj.prototype.anchor = function(name) {
    if(!AnchorWay[name]){
        throw new Error("unknow anchor name: "+name)
    }
    if(!this._a9) {
        this._a9 = {}
    }
    if(!this._a9[name]) {
        this._a9[name] = new Anchor(this, AnchorWay[name])
    }
    return this._a9[name]
}